{"remainingRequest":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/drema/Desktop/Drema/transporder/transporder/src/views/hub/Table.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/drema/Desktop/Drema/transporder/transporder/src/views/hub/Table.vue","mtime":1650728427744},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/css-loader/dist/cjs.js","mtime":1650727746302},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1650727746801},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/postcss-loader/src/index.js","mtime":1650727746459},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/sass-loader/dist/cjs.js","mtime":1650727745958},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/cache-loader/dist/cjs.js","mtime":1650727746009},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/index.js","mtime":1650727746586}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnc3JjL2Fzc2V0cy9jc3MvdmFyaWFibGVzLnNjc3MnOwpAaW1wb3J0ICdzcmMvYXNzZXRzL2Nzcy9odWItdGFibGUuc2Nzcyc7Cg=="},{"version":3,"sources":["Table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmbA;AACA","file":"Table.vue","sourceRoot":"src/views/hub","sourcesContent":["<template>\n  <div class=\"t-rr-s-table-wrapper\">\n    <table class=\"table table-hover\">\n      <thead>\n      <tr>\n        <th scope=\"col\">\n          <Checkbox index=\"h1\"\n                    v-model=\"checkAll\"\n                    @change=\"allchoiseFu(checkAll)\"/>\n        </th>\n        <th scope=\"col\" width=\"40%\"> \n          <div class=\"flex-center-start\">\n            <div class=\"el-overflow-white-space\">\n              {{$t('file_name')}}\n            </div>\n            <label for=\"fileName\">\n              <i class=\"transporter-menu_outline\" />\n            </label>\n             <input name=\"fileName\" \n                    id=\"fileName\" \n                    type=\"checkbox\" \n                    v-model=\"fileName\"\n                    class=\"el-display-none\"\n                    @change=\"sortList('file_name')\">\n          </div>\n        </th>\n        <th scope=\"col\">\n          <div class=\"flex-center-center\">\n            <div class=\"el-overflow-white-space\">\n              {{$t('version')}}\n            </div>\n            <label for=\"version\">\n              <i class=\"transporter-menu_outline\" />\n            </label>\n             <input name=\"version\" \n                    id=\"version\" \n                    type=\"checkbox\" \n                    v-model=\"version\"\n                    class=\"el-display-none\"\n                    @change=\"sortList('version')\">\n          </div>\n        </th>\n        <th scope=\"col\">\n          <div class=\"flex-center-end\">\n            <div class=\"el-overflow-white-space\">\n              {{$t('size')}}\n            </div>\n            <label for=\"size\">\n              <i class=\"transporter-menu_outline\" />\n            </label>\n             <input name=\"size\" \n                    id=\"size\" \n                    type=\"checkbox\" \n                    v-model=\"size\"\n                    class=\"el-display-none\"\n                    @change=\"sortList('size')\">\n          </div>\n        </th>\n        <th scope=\"col\">\n          <div class=\"flex-center-end\">\n            <div class=\"el-overflow-white-space\">\n              {{$t('date_of_change')}}\n            </div>\n            <label for=\"dateOfChange\">\n              <i class=\"transporter-menu_outline\" />\n            </label>\n             <input name=\"dateOfChange\" \n                    id=\"dateOfChange\" \n                    type=\"checkbox\" \n                    v-model=\"dateOfChange\"\n                    class=\"el-display-none\"\n                    @change=\"sortList('date_of_change')\">\n          </div>\n        </th>\n        <th scope=\"col\">\n          <div class=\"flex-center-start\">\n            <div class=\"el-overflow-white-space\">\n              {{$t('who_changed')}}\n            </div>\n             <label for=\"whoChanged\">\n                <i class=\"transporter-menu_outline\" />\n             </label>\n             <input name=\"whoChanged\" \n                    id=\"whoChanged\" \n                    type=\"checkbox\" \n                    v-model=\"whoChanged\"\n                    class=\"el-display-none\"\n                    @change=\"sortList('who_changed')\">\n          </div>\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"(item , idx) in dataFilter\"\n          :key=\"idx\"\n          :class=\"{'t-rr-s-choise-item-active' : item.check}\"\n          >\n        <th scope=\"row\">\n          <Checkbox :index=\"idx\"\n                    v-model=\"item.check\"\n                    @change=\"choiseFu(item)\"/>\n        </th>\n        <td>\n          <div @click=\"openPopup(item)\">\n                 <div class=\"cursor-pointer\">\n                    <!-- <i :class=\"[{'transporter-doc' : item.type === 'folder'}]\"\n                      style=\"font-size: 24px\"/> -->\n                    <img v-if=\"item.extension === 'doc' || item.extension === 'docx'\" class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/doc.svg\">\n                    <!-- <img v-if=\"item.extension === 'rvt'\" class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/rvt.svg\"> -->\n                    <img v-if=\"item.extension === 'pdf'\" class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/pdf.svg\">\n                    <img v-if=\"item.extension === 'xlxs'\" class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/xls.svg\">\n                    <img v-if=\"item.extension === 'dwg'\" class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/dwg.svg\">\n                    <img v-if=\"item.type === 'folder'\" class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/folder.svg\">\n                    <i v-if=\"item.type !== 'folder' && item.extension !== 'dwg' && item.extension !== 'doc' && item.extension !== 'docx' && item.extension !== 'pdf' && item.extension !== 'xlxs'\" class=\"transporter-file fz-24\" />\n\n                   {{item.name}}\n                 </div>\n              \n          </div>\n        </td>\n        <td v-if=\"item.type !== 'folder'\">\n          <div class=\"t-rr-s-version-block\">\n            <span v-if=\"item.type !== 'folder'\">V</span>{{item.version || '-'}}\n          </div>\n        </td>\n        <td v-if=\"item.type === 'folder'\"> - </td>\n        <td>{{convert(item.size) || '-'}}</td>\n        <!-- <td v-if=\"item.type === 'folder'\"> - </td> -->\n        <td>{{item.modified_time | date('date')}}</td>\n        <td>\n          <i class=\"mr-10  transporter-profile\" v-if=\"item.modified_user_name\"></i>\n          {{item.modified_user_name || '-'}}\n          <Popup :item=\"item\"\n                  v-if=\"item.popupOpen\">\n                  <div class=\"t-rr-s-popup-block-header\">\n                        {{$t('version_history')}}\n                    <i class=\"transporter-Close fz-28 cursor-pointer\" \n                       @click.stop=\"closePopup(item)\"/>\n                  </div>\n                  <div class=\"t-rr-s-popup-block-content fz-20\">\n                    {{item.name}}\n                    <ul class=\"t-rr-s-popup-block-content-list\">\n                      <li class=\"t-rr-s-popup-block-content-list-item\"\n                          v-for=\"version in item.listVersion\" \n                          :key=\"version.id\">\n                          <div class=\"t-rr-s-popup-block-content-list-item-version fz-20\">\n                              V{{version.version}}\n                          </div>\n\n                          <div class=\"t-rr-s-popup-block-content-list-item-info\">\n                            <span>\n                              {{$t('loaded')}}\n                            </span>\n                            <span>\n                              {{version.create_user_name}}\n                            </span>\n                            <span>\n                              {{version.create_time | date('date')}}\n                            </span>\n                            <mark v-if=\"version.version === item.version\">\n                              {{$t('Current')}}\n                            </mark>\n                          </div>\n\n                          <div class=\"t-rr-s-popup-block-content-list-item-download cursor-pointer\"\n                               @click=\"download(version)\">\n                            <img class=\"mr-1\" src=\"@/assets/transporter-icon/Icon/downloadFile.svg\">\n                            \n                          </div>\n                      </li>\n                    </ul>\n                  </div>\n                  <div class=\"t-rr-s-popup-block-footer flex-center-end\">\n                      <UiButton \n                                :title=\"$t('close')\"\n                                icon=\"false\"\n                                @click=\"closePopup(item)\" />\n                  </div>\n\n              </Popup>\n        </td>\n      </tr>\n      <tr v-if=\"!dataFilter.length\">\n        <td colspan=\"6\" class=\"t-tt-s-empty-td fz-24\">\n          {{$t('TheFolderIsEmpty')}}\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport Checkbox from '@/components/ui/Checkbox'\nimport UiButton from '@/components/ui/Button'\nimport Popup from '../../components/ui/Popup.vue'\nimport QueryMixin from '@/mixins/query-mixin'\nimport {mapActions} from 'vuex'\n\n\n\nexport default {\n  name: \"Table\",\n  components: {\n    Checkbox,\n    Popup,\n    UiButton,\n  },\n  mixins: [\n    QueryMixin,\n  ],\n  data() {\n    return {\n      checkAll: false,\n      lovingVue: false,\n      fileName: false,\n      version: false,\n      size: false,\n      whoChanged: false,\n      dateOfChange: false,\n      search: '',\n      dataFilter: [],\n    }\n  },\n  props: {\n    data: {\n      type: Array\n    },\n    triger: {\n      type: Array\n    }\n  },\n  methods: {\n    ...mapActions(['listContentDownloadAdd']),\n    allchoiseFu(checkAll) {\n      if(checkAll) this.dataFilter.map(one=>one.check = true)\n      if(!checkAll) this.dataFilter.map(one=>one.check = false)\n      let checkFu = this.dataFilter.filter(one=>one.check)\n\n      console.log(checkFu)\n      this.listContentDownloadAdd(checkFu)\n\n    },\n    choiseFu(item) {\n      let checkFu = this.dataFilter.filter(one=>one.check)\n      if(!item.check) this.checkAll = !!checkFu.length\n      if(item.check && checkFu.length === this.dataFilter.length) this.checkAll = true\n      this.listContentDownloadAdd(checkFu)\n\n    },\n    sortList(column) {\n      console.log(332)\n      switch (column) {\n        case \"file_name\":\n          if(this.fileName) this.dataFilter.sort(function (a, b) {\n            if (a.name < b.name) {\n              return 1;\n            }\n            if (a.name > b.name) {\n              return -1;\n            }\n            return 0;\n          })\n          if(!this.fileName) this.dataFilter.sort(function (a, b) {\n            if (a.name > b.name) {\n              return 1;\n            }\n            if (a.name < b.name) {\n              return -1;\n            }\n            return 0;\n          })\n          break;\n        case \"version\":\n          if(this.version) this.dataFilter.sort(function (a, b) {\n            if (a.version < b.version) {\n              return 1;\n            }\n            if (a.version > b.version) {\n              return -1;\n            }\n            return 0;\n          })\n          if(!this.version) this.dataFilter.sort(function (a, b) {\n            if (a.version > b.version) {\n              return 1;\n            }\n            if (a.version < b.version) {\n              return -1;\n            }\n            return 0;\n          })\n          break;\n        case \"size\":\n        if(this.size) this.dataFilter.sort(function (a, b) {\n          if (a.size < b.size) {\n            return 1;\n          }\n          if (a.size > b.size) {\n            return -1;\n          }\n          return 0;\n        })\n        if(!this.size) this.dataFilter.sort(function (a, b) {\n          if (a.size > b.size) {\n            return 1;\n          }\n          if (a.size < b.size) {\n            return -1;\n          }\n          return 0;\n        })\n        break;\n        case \"date_of_change\":\n          console.log(this.dataFilter)\n        if(this.dateOfChange) this.dataFilter.sort(function (a, b) {\n          console.log(a.modified_time)\n          if (a.modified_time < b.modified_time) {\n            return 1;\n          }\n          if (a.modified_time > b.modified_time) {\n            return -1;\n          }\n          return 0;\n        })\n        if(!this.dateOfChange) this.dataFilter.sort(function (a, b) {\n          if (a.modified_time > b.modified_time) {\n            return 1;\n          }\n          if (a.modified_time < b.modified_time) {\n            return -1;\n          }\n          return 0;\n        })\n        break;\n        case \"who_changed\":\n        if(this.whoChanged) this.dataFilter.sort(function (a, b) {\n          if (a.modified_user_name < b.modified_user_name) {\n            return 1;\n          }\n          if (a.modified_user_name > b.modified_user_name) {\n            return -1;\n          }\n          return 0;\n        })\n        if(!this.whoChanged) this.dataFilter.sort(function (a, b) {\n          if (a.modified_user_name > b.modified_user_name) {\n            return 1;\n          }\n          if (a.modified_user_name < b.modified_user_name) {\n            return -1;\n          }\n          return 0;\n        })\n        break;\n        \n        default:\n          break;\n      }\n    },\n    openFolder(item) {\n      console.log(item)\n      this.$root.$emit('folderData' , item)\n    },\n    openPopup(item) {\n      if(item.type === \"folder\") this.openFolder(item)\n\n      if(item.type !== \"folder\") {\n        this.postData('/api/v1/Version.getList', {\n          item_id: item.item_id,\n          hub_id: item.hub_id\n        })\n        .then((data) => {\n          item.listVersion = data\n          if(item.type === \"folder\") {\n            item.popupOpen = false\n          } else {\n          if(item.listVersion.length) item.popupOpen = true\n          }\n          this.$set(this.dataFilter, this.dataFilter.indexOf(item), item)\n        });\n      }\n    },\n    closePopup(item) {\n      console.log(item)\n      item.popupOpen = false\n      this.$set(this.dataFilter, this.dataFilter.indexOf(item), item)\n    },\n    download(version) {\n        this.postData('/api/v1/Version.download', {\n          version_id: version.version_id,\n          hub_id: version.hub_id\n        })\n        .then((data) => {\n          console.log(data)\n          document.location.href = data.location;\n        });\n    },\n    searchFu(filterData) {\n      this.dataFilter = this.data.slice();\n      if (filterData) {\n        this.dataFilter = this.data.filter(one => {\n            return one.name.toLowerCase().includes(filterData.toLowerCase());\n        });\n      }\n    },\n    // convert(item) {\n    //   return item.size * 0.001\n    // }\n    convert(item) {\n      var i = -1;\n      var byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];\n      do {\n          item = item / 1024;\n          i++;\n      } while (item > 1024);\n      return Math.max(item, 0.1).toFixed(1) + byteUnits[i];\n    }\n  },\n  watch: {\n    'data': {\n      handler() {\n        this.dataFilter = this.data.slice();\n      }\n    }\n  },\n  mounted() {\n    this.$root.$on('filterData', (filterData) => {\n      this.searchFu(filterData)\n    })\n  },\n}\n</script>\n\n<style lang=\"scss\">\n@import 'src/assets/css/variables.scss';\n@import 'src/assets/css/hub-table.scss';\n</style>"]}]}