{"remainingRequest":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/drema/Desktop/Drema/transporder/transporder/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/drema/Desktop/Drema/transporder/transporder/src/views/hub/Table.vue?vue&type=template&id=6026c76a&","dependencies":[{"path":"/Users/drema/Desktop/Drema/transporder/transporder/src/views/hub/Table.vue","mtime":1650486431514},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/cache-loader/dist/cjs.js","mtime":1644509624454},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1644509625211},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/cache-loader/dist/cjs.js","mtime":1644509624454},{"path":"/Users/drema/Desktop/Drema/transporder/transporder/node_modules/vue-loader/lib/index.js","mtime":1644509624966}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}